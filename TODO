Load all images of a ProcessedRun to a 4d array. Then use a surface
fitter to fit the wave-field.

Store all data as hdf5:
    - concatenated image
    - interface pre-fitting
    - interface post-fitting


- use new objects in generate (maybe multiprocess here?)

- change pixel_to_real to operate on measurement_region

### multiprocessing

centralise this on images so that it is only specified once (and
provide a serial alternative).

do this by creating something like an ImageCollection class, which
has a hacked getattr that passes commands to memebers (which are
LabImage instances).


### Refactor

- Consider StitchedImage --> Stitcher

Use the stitcher like this:

    stitcher = Stitcher(join)
    stitched_image = stitcher.stitch(im1, im2)

Would do similar for interfacing:

    interfacer = Interfacer()
    lock_interface = interfacer.interface(im)

Or we could have `interface` as a method on a ProcessedImage.


### Plotting

Hovmollers
